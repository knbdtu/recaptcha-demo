buildscript {
	repositories {
		maven {
			url 'http://10.21.86.72:8081/repository/maven-proxy-group/'
		}
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:2.0.4.RELEASE")
	}
}

apply plugin: 'java'


jar {
	manifest {
		attributes "Main-Class": "com.ajio.promoengine.PromoEngineManagementApplication"
	}

	from {
		configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
	}
}

apply plugin: 'eclipse'
apply plugin: 'maven'
apply plugin: 'idea'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin:'base'

group = 'com.ril.ajio'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '1.8'

repositories {
//    mavenCentral()
	maven { url 'http://10.21.86.72:8081/repository/maven-proxy-group/' }
}

ext {
	lombokVersion = "1.18.8"
}

dependencies {
	testImplementation(
			'junit:junit:4.12',
			'org.junit.jupiter:junit-jupiter-api:5.4.2'
	)

	testRuntime(
			'org.junit.jupiter:junit-jupiter-engine:5.4.2',
			'org.junit.vintage:junit-vintage-engine:5.4.2'
	)
	compile("org.springframework.boot:spring-boot-starter-web")
	compile("org.projectlombok:lombok:$lombokVersion")
	annotationProcessor("org.projectlombok:lombok:$lombokVersion")
	testImplementation('org.springframework.boot:spring-boot-starter-test') {
		exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
	}
	compile 'org.springframework.boot:spring-boot-starter-data-mongodb:2.0.1.RELEASE'
	compile group: 'org.springframework.retry', name: 'spring-retry', version: '1.1.2.RELEASE'
	compile group: 'com.googlecode.json-simple', name: 'json-simple', version: '1.1'
	compile group: 'org.json', name: 'json', version: '20090211'
	compile 'com.sun.activation:javax.activation:1.2.0'
	compile "org.springframework.boot:spring-boot-devtools"
	compile group: 'org.springframework.boot', name: 'spring-boot-starter-thymeleaf'

}

task unpack(type: Copy) {
	dependsOn bootJar
	from(zipTree(tasks.bootJar.outputs.files.singleFile))
	into("build/dependency")
}


test {
	useJUnitPlatform()
	useJUnit()
	maxHeapSize = '1G'
	ignoreFailures = true
}

task copyproperties(type: Copy) {
	dependsOn clean
	from "$rootDir/src/main/resources/b2b/"
	include "*.properties"
	into "$rootDir/src/main/resources/"
}